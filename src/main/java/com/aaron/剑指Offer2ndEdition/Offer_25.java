package com.aaron.ÂâëÊåáOffer2ndEdition;

import java.util.*;

//ËæìÂÖ•‰∏§‰∏™ÈÄíÂ¢ûÊéíÂ∫èÁöÑÈìæË°®ÔºåÂêàÂπ∂Ëøô‰∏§‰∏™ÈìæË°®Âπ∂‰ΩøÊñ∞ÈìæË°®‰∏≠ÁöÑËäÇÁÇπ‰ªçÁÑ∂ÊòØÈÄíÂ¢ûÊéíÂ∫èÁöÑ„ÄÇ 
//
// Á§∫‰æã1Ôºö 
//
// ËæìÂÖ•Ôºö1->2->4, 1->3->4
//ËæìÂá∫Ôºö1->1->2->3->4->4 
//
// ÈôêÂà∂Ôºö 
//
// 0 <= ÈìæË°®ÈïøÂ∫¶ <= 1000 
//
// Ê≥®ÊÑèÔºöÊú¨È¢ò‰∏é‰∏ªÁ´ô 21 È¢òÁõ∏ÂêåÔºöhttps://leetcode-cn.com/problems/merge-two-sorted-lists/ 
// Related Topics ÈÄíÂΩí ÈìæË°® 
// üëç 204 üëé 0


/**
 * ÂâëÊåá Offer 25, ÂêàÂπ∂‰∏§‰∏™ÊéíÂ∫èÁöÑÈìæË°®
 * @author Aaron Zhu
 * @date 2022-2-6
 */
public class  Offer_25 {
    public static void main(String[] args) {
        Solution solution = new Solution();
    }

    public static class Solution {
        public ListNode mergeTwoLists(ListNode l1, ListNode l2) {
            ListNode head = new ListNode(0);
            ListNode currentNode = head;
            while ( l1!=null || l2!=null ) {
                if( l1==null ) {
                    currentNode.next = new ListNode( l2.val );
                    l2 = l2.next;
                } else if( l2==null ) {
                    currentNode.next = new ListNode(l1.val);
                    l1 = l1.next;
                } else if( l1.val <= l2.val ) {
                    currentNode.next = new ListNode(l1.val);
                    l1 = l1.next;
                } else if( l1.val > l2.val ) {
                    currentNode.next = new ListNode( l2.val );
                    l2 = l2.next;
                }

                currentNode = currentNode.next;
            }
            return head.next;
        }
    }

    public static class ListNode {
        int val;
        ListNode next;
        ListNode(int x) { val = x; }
    }
}

